CTRL + SHIFT + J - открыть консоль JS в хроме

Node.js — рантайм для выполнения JavaScript вне браузера. Нужно установить, чтобы запускать код JS вне браузера. 
Node.js не встроен в браузер. В браузере встроен JavaScript-движок, такой как V8 (используемый в Google Chrome) или SpiderMonkey (используемый в Mozilla Firefox), который исполняет JavaScript-код. Node.js, с другой стороны, предназначен для выполнения JavaScript-кода на сервере и включает в себя дополнительные модули и функции, которые не поддерживаются в браузере.
Практически все сущности в JS - это объекты
Объект - это набор свойств (ключ:значение)

Фраза "x86" исторически использовалась для обозначения 32-битной архитектуры процессоров, начиная с процессора Intel 80386, также известного как i386. Впоследствии этот термин стал использоваться для обозначения всей семейства 32-битных процессоров. Когда появились 64-битные процессоры, их стали обозначать как "x86-64" или "x64", чтобы различать 32-битную и 64-битную архитектуры.
Почему важна разница:
    Совместимость: 32-битные программы (x86) могут работать на 64-битных системах, но имеют ограничения по памяти (максимум 4 ГБ).
    Производительность: 64-битные программы (x64) могут использовать больше оперативной памяти и ресурсов, что делает их более производительными для задач, требующих большого объема памяти.

console.log('Hello')
console - это объект. Если просто ввести console и нажать ENTER, потом развернуть вывод, то можно увидеть что это объект, состоящий из ряда свойств (clear, count, debug, dir, table, log и тд, которые содержат функцию как значение)

Вот вывод:
    Console { assert: assert(), clear: clear(), count: count(), countReset: countReset(), debug: debug(), error: error(), info: info(), log: log(), table: table(), trace: trace(), … }
    assert: function assert()
    clear: function clear()
    count: function count()
и так далее
Эти свойства называются методы. И мы можем вызывать МЕТОДЫ.
Те в console.log, console - это обьект, а log - это свойство представленное методом
А методы - это функции
Вызов функции - это выражение, так как он всегда возвращает значение

    Выражения
Любое выражение всегда возвращает значение

Выражения с побочным действием (side effect), например:
a=5, не только вернет значение 5, но и присвоит
b++, вернет 7, если b=5, и увелисит b на 1 => b=7

